---
# Source: nginx-ingress/templates/controller-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: appprotect-wafv5-nginx-ingress
  namespace: appprotect-wafv5
  labels:
    helm.sh/chart: nginx-ingress-1.5.0
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: appprotect-wafv5
    app.kubernetes.io/version: "4.0.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: nginx-ingress/templates/controller-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: appprotect-wafv5-nginx-ingress
  namespace: appprotect-wafv5
  labels:
    helm.sh/chart: nginx-ingress-1.5.0
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: appprotect-wafv5
    app.kubernetes.io/version: "4.0.0"
    app.kubernetes.io/managed-by: Helm
data:
  {}
---
# Source: nginx-ingress/templates/controller-leader-election-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: appprotect-wafv5-nginx-ingress-leader-election
  namespace: appprotect-wafv5
  labels:
    helm.sh/chart: nginx-ingress-1.5.0
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: appprotect-wafv5
    app.kubernetes.io/version: "4.0.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: nginx-ingress/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: appprotect-wafv5-nginx-ingress
  labels:
    helm.sh/chart: nginx-ingress-1.5.0
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: appprotect-wafv5
    app.kubernetes.io/version: "4.0.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - namespaces
  - pods
  - secrets
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
  - list
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
- apiGroups:
  - "apps"
  resources:
  - replicasets
  - daemonsets
  verbs:
  - get
- apiGroups:
  - networking.k8s.io
  resources:
  - ingressclasses
  verbs:
  - get
  - list
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - appprotect.f5.com
  resources:
  - appolicies
  - aplogconfs
  - apusersigs
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - k8s.nginx.org
  resources:
  - virtualservers
  - virtualserverroutes
  - globalconfigurations
  - transportservers
  - policies
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - k8s.nginx.org
  resources:
  - virtualservers/status
  - virtualserverroutes/status
  - policies/status
  - transportservers/status
  verbs:
  - update
---
# Source: nginx-ingress/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: appprotect-wafv5-nginx-ingress
  labels:
    helm.sh/chart: nginx-ingress-1.5.0
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: appprotect-wafv5
    app.kubernetes.io/version: "4.0.0"
    app.kubernetes.io/managed-by: Helm
subjects:
- kind: ServiceAccount
  name: appprotect-wafv5-nginx-ingress
  namespace: appprotect-wafv5
roleRef:
  kind: ClusterRole
  name: appprotect-wafv5-nginx-ingress
  apiGroup: rbac.authorization.k8s.io
---
# Source: nginx-ingress/templates/controller-role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: appprotect-wafv5-nginx-ingress
  labels:
    helm.sh/chart: nginx-ingress-1.5.0
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: appprotect-wafv5
    app.kubernetes.io/version: "4.0.0"
    app.kubernetes.io/managed-by: Helm
  namespace: appprotect-wafv5
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - pods
  - secrets
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - ""
  resources:
    - namespaces
  verbs:
    - get
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
  - list
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  resourceNames:
  - appprotect-wafv5-nginx-ingress-leader-election
  verbs:
  - get
  - update
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
---
# Source: nginx-ingress/templates/controller-rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: appprotect-wafv5-nginx-ingress
  labels:
    helm.sh/chart: nginx-ingress-1.5.0
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: appprotect-wafv5
    app.kubernetes.io/version: "4.0.0"
    app.kubernetes.io/managed-by: Helm
  namespace: appprotect-wafv5
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: appprotect-wafv5-nginx-ingress
subjects:
- kind: ServiceAccount
  name: appprotect-wafv5-nginx-ingress
  namespace: appprotect-wafv5
---
# Source: nginx-ingress/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: appprotect-wafv5-nginx-ingress-controller
  namespace: appprotect-wafv5
  labels:
    helm.sh/chart: nginx-ingress-1.5.0
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: appprotect-wafv5
    app.kubernetes.io/version: "4.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  externalTrafficPolicy: Local
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
    nodePort:
  - port: 443
    targetPort: 443
    protocol: TCP
    name: https
    nodePort:
  selector:
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: appprotect-wafv5
---
# Source: nginx-ingress/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: appprotect-wafv5-nginx-ingress-controller
  namespace: appprotect-wafv5
  labels:
    helm.sh/chart: nginx-ingress-1.5.0
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: appprotect-wafv5
    app.kubernetes.io/version: "4.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-ingress
      app.kubernetes.io/instance: appprotect-wafv5
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx-ingress
        app.kubernetes.io/instance: appprotect-wafv5
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9113"
        prometheus.io/scheme: "http"
    spec:
      volumes:

      - emptyDir: {}
        name: app-protect-bd-config
      - emptyDir: {}
        name: app-protect-config
      - emptyDir: {}
        name: app-protect-bundles
      serviceAccountName: appprotect-wafv5-nginx-ingress
      automountServiceAccountToken: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      terminationGracePeriodSeconds: 30
      hostNetwork: false
      dnsPolicy: ClusterFirst
      containers:
      - image: nginx/nginx-ingress:4.0.0
        name: nginx-ingress
        imagePullPolicy: "IfNotPresent"
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        - name: https
          containerPort: 443
          protocol: TCP
        - name: prometheus
          containerPort: 9113
        - name: readiness-port
          containerPort: 8081
        readinessProbe:
          httpGet:
            path: /nginx-ready
            port: readiness-port
          periodSeconds: 1
          initialDelaySeconds: 0
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsUser: 101 #nginx
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
        volumeMounts:

        - name: app-protect-bd-config
          mountPath: /opt/app_protect/bd_config
        - name: app-protect-config
          mountPath: /opt/app_protect/config
          # app-protect-bundles is mounted so that Ingress Controller
          # can verify that referenced bundles are present
        - name: app-protect-bundles
          mountPath: /etc/app_protect/bundles
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        args:
          - -nginx-plus=true
          - -nginx-reload-timeout=60000
          - -enable-app-protect=true
          - -app-protect-enforcer-address="localhost:50001"
          - -enable-app-protect-dos=false
          - -nginx-configmaps=$(POD_NAMESPACE)/appprotect-wafv5-nginx-ingress
          - -ingress-class=nginx
          - -health-status=false
          - -health-status-uri=/nginx-health
          - -nginx-debug=false
          - -log-level=info
          - -log-format=glog
          - -nginx-status=true
          - -nginx-status-port=8080
          - -nginx-status-allow-cidrs=127.0.0.1
          - -report-ingress-status
          - -external-service=appprotect-wafv5-nginx-ingress-controller
          - -enable-leader-election=true
          - -leader-election-lock-name=appprotect-wafv5-nginx-ingress-leader-election
          - -enable-prometheus-metrics=true
          - -prometheus-metrics-listen-port=9113
          - -prometheus-tls-secret=
          - -enable-service-insight=false
          - -service-insight-listen-port=9114
          - -service-insight-tls-secret=
          - -enable-custom-resources=true
          - -enable-snippets=false
          - -disable-ipv6=false
          - -enable-tls-passthrough=false
          - -enable-cert-manager=false
          - -enable-oidc=false
          - -enable-external-dns=false
          - -default-http-listener-port=80
          - -default-https-listener-port=443
          - -ready-status=true
          - -ready-status-port=8081
          - -enable-latency-metrics=false
          - -ssl-dynamic-reload=true
          - -enable-telemetry-reporting=true
          - -weight-changes-dynamic-reload=false

      - name: waf-enforcer
        image: my.private.reg/nap/waf-enforcer:5.3.0
        imagePullPolicy: "IfNotPresent"
        env:
          - name: ENFORCER_PORT
            value: "50001"
        volumeMounts:
          - name: app-protect-bd-config
            mountPath: /opt/app_protect/bd_config
      - name: waf-config-mgr
        image: my.private.reg/nap/waf-config-mgr:5.3.0
        imagePullPolicy: "IfNotPresent"
        securityContext:

            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            runAsNonRoot: true
            runAsUser: 101
        volumeMounts:
          - name: app-protect-bd-config
            mountPath: /opt/app_protect/bd_config
          - name: app-protect-config
            mountPath: /opt/app_protect/config
          - name: app-protect-bundles
            mountPath: /etc/app_protect/bundles
---
# Source: nginx-ingress/templates/controller-ingress-class.yaml
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: nginx
  labels:
    helm.sh/chart: nginx-ingress-1.5.0
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: appprotect-wafv5
    app.kubernetes.io/version: "4.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  controller: nginx.org/ingress-controller
---
# Source: nginx-ingress/templates/controller-lease.yaml
apiVersion: coordination.k8s.io/v1
kind: Lease
metadata:
  name: appprotect-wafv5-nginx-ingress-leader-election
  namespace: appprotect-wafv5
  labels:
    helm.sh/chart: nginx-ingress-1.5.0
    app.kubernetes.io/name: nginx-ingress
    app.kubernetes.io/instance: appprotect-wafv5
    app.kubernetes.io/version: "4.0.0"
    app.kubernetes.io/managed-by: Helm
