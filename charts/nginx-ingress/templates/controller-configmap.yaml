{{- if not .Values.controller.customConfigMap -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "nginx-ingress.configName" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "nginx-ingress.labels" . | nindent 4 }}
{{- if .Values.controller.config.annotations }}
  annotations:
{{ toYaml .Values.controller.config.annotations | indent 4 }}
{{- end }}
data:
{{ toYaml (default dict .Values.controller.config.entries) | indent 2 }}
{{- end }}
---
{{- if and .Values.nginxAgent.enable (eq (.Values.nginxAgent.customConfigMap | default "") "") }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "nginx-ingress.agentConfigName" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "nginx-ingress.labels" . | nindent 4 }}
{{- if .Values.controller.config.annotations }}
  annotations:
{{ toYaml .Values.controller.config.annotations | indent 4 }}
{{- end }}
data:
  nginx-agent.conf: |-
{{ include "nginx-ingress.agentConfiguration" . | indent 4 }}
{{- end }}
---
{{- if and .Values.controller.nginxplus (eq (.Values.controller.mgmt.customConfigMap | default "") "") }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "nginx-ingress.mgmtConfigName" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "nginx-ingress.labels" . | nindent 4 }}
{{- if .Values.controller.config.annotations }}
  annotations:
{{ toYaml .Values.controller.config.annotations | indent 4 }}
{{- end }}
data:
  license-secret-name: {{ quote .Values.controller.mgmt.licenseTokenSecretName }}
{{- if hasKey .Values.controller.mgmt "sslVerify" }}
  ssl-verify: {{ quote .Values.controller.mgmt.sslVerify }}
{{- end }}
{{- if hasKey .Values.controller.mgmt "enforceInitialReport" }}
  enforce-initial-report: {{ quote .Values.controller.mgmt.enforceInitialReport }}
{{- end }}
{{- if hasKey .Values.controller.mgmt "endpoint" }}
  endpoint: {{ quote .Values.controller.mgmt.endpoint }}
{{- end }}
{{- if hasKey .Values.controller.mgmt "interval" }}
  interval: {{ quote .Values.controller.mgmt.interval }}
{{- end }}
{{- if hasKey .Values.controller.mgmt.sslTrustedCertificate "secretName" }}
  trusted-certificate-secret-name: {{ quote .Values.controller.mgmt.sslTrustedCertificate.secretName }}
{{- end }}
{{- if hasKey .Values.controller.mgmt.sslTrustedCertificate "fileName" }}
  trusted-certificate-file-name: {{ quote .Values.controller.mgmt.sslTrustedCertificate.fileName }}
{{- end }}
{{- if hasKey .Values.controller.mgmt "enableClientAuth" }}
  ssl-client-authentication: {{ quote .Values.controller.mgmt.enableClientAuth }}
{{- end }}
{{- if hasKey .Values.controller.mgmt.resolver "addresses" }}
  resolver-addresses: {{ join "," .Values.controller.mgmt.resolver.addresses | quote }}
{{- end }}
{{- if hasKey .Values.controller.mgmt.resolver "ipv6" }}
  resolver-ipv6: {{ quote .Values.controller.mgmt.resolver.ipv6 }}
{{- end }}
{{- if hasKey .Values.controller.mgmt.resolver "valid" }}
  resolver-valid: {{ quote .Values.controller.mgmt.resolver.valid }}
{{- end }}
{{- end }}
