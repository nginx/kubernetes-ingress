name: Nightly

on:
  schedule:
    - cron:  '0 4 * * *'

defaults:
  run:
    shell: bash

env:
  DOCKER_BUILDKIT: 1
  K8S_TIMEOUT: 90s
  HELM_CHART_DIR: deployments/helm-chart
  HELM_CHART_VERSION: 0.0.0-edge
  VERSION: nightly

jobs:

  binary:
    name: Build Binary
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Output Variables
        id: commit
        run: |
          echo "::set-output name=sha::$(echo ${GITHUB_SHA} | cut -c1-7)"
      - name: Determine Go version from go.mod
        run: echo "GO_VERSION=$(grep "go 1." go.mod | cut -d " " -f 2)" >> $GITHUB_ENV
      - name: Setup Golang Environment
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Determine GOPATH
        run: echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
      - name: Check if CRDs changed
        run: |
          make update-crds && git diff --name-only --exit-code deployments/common/crds* deployments/helm-chart/crds*
      - name: Check if Codegen changed
        run: |
          make update-codegen && git diff --name-only --exit-code pkg/**/zz_generated.deepcopy.go
      - name: Build binaries
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: build --snapshot --rm-dist --id kubernetes-ingress
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOPATH: ${{ env.GOPATH }}
      - name: Store Artifacts in Cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Determine Go version from go.mod
        run: echo "GO_VERSION=$(grep "go 1." go.mod | cut -d " " -f 2)" >> $GITHUB_ENV
      - name: Setup Golang Environment
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Run Tests
        run: go test ./...

  build:
    name: Build Docker Images
    runs-on: ubuntu-20.04
    needs: [binary, unit-tests]
    strategy:
      matrix:
        image: [debian, alpine, opentracing, ubi]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Fetch Cached Artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build Docker Image ${{ matrix.image }}
        uses: docker/build-push-action@v2
        with:
          file: build/Dockerfile
          context: .
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          target: goreleaser
          tags: ${{ matrix.image }}:${{ github.sha }}
          build-args: BUILD_OS=${{ matrix.image }}

  smoke-tests:
    name: Nightly Smoke Tests
    runs-on: ubuntu-20.04
    needs: [build, binary, unit-tests]
    strategy:
      matrix:
        k8s: [1.19.11, 1.20.7, 1.21.2, 1.22.0]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Run Smoke Tests
        id: smoke-tests
        uses: ./.github/actions/smoke-tests
        with:
          k8s-version: ${{ matrix.k8s }}
          k8s-timeout: ${{ env.K8S_TIMEOUT }}
      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.smoke-tests.outputs.test-results-name }}-${{ matrix.k8s }}
          path: ${{ github.workspace }}/tests/${{ steps.smoke-tests.outputs.test-results-name }}.html
        if: always()

  helm-tests:
    name: Helm Tests
    runs-on: ubuntu-20.04
    needs: [binary, build, unit-tests]
    env:
      NGINX_HTTP_PORT: 8080
      NGINX_HTTPS_PORT: 8443
      HELM_TEST_RETRIES: 5
      HELM_HTTP_POSTFIX: s
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Fetch Cached Artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host
      - name: Docker build cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build Docker Image nginx-ingress
        uses: docker/build-push-action@v2
        with:
          file: build/Dockerfile
          context: '.'
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          target: goreleaser
          tags: nginx-ingress:${{ github.sha }}
          load: true
          build-args: BUILD_OS=debian
      - name: Deploy Kubernetes
        id: k8s
        run: |
          kind create cluster --name ${{ github.run_id }} --wait ${{ env.K8S_TIMEOUT }}
          kind load docker-image nginx-ingress:${{ github.sha }} --name ${{ github.run_id }}
      - name: Install Chart
        run: >
          helm install
          oss
          .
          --set controller.image.repository=nginx-ingress
          --set controller.image.tag=${{ github.sha }}
          --set controller.service.type=NodePort
          --set controller.nginxplus=false
          --wait
        working-directory: ${{ github.workspace }}/deployments/helm-chart
      - name: Expose Test Ingresses
        run: |
          kubectl port-forward service/oss-nginx-ingress ${{ env.NGINX_HTTP_PORT }}:80 &
          kubectl port-forward service/oss-nginx-ingress ${{ env.NGINX_HTTPS_PORT }}:443 &
      - name: Test HTTP
        run: |
          . tests/ci-files/helm-http-test.sh ${{ env.HELM_TEST_RETRIES }} ${{ env.NGINX_HTTP_PORT }}
      - name: Test HTTPS
        run: |
          . tests/ci-files/helm-http-test.sh ${{ env.HELM_TEST_RETRIES }} ${{ env.NGINX_HTTPS_PORT }} ${{ env.HELM_HTTP_POSTFIX }}
