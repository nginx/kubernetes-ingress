name: Edge

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - 'examples-of-custom-resources/**'
      - '**.md'
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - 'examples-of-custom-resources/**'
      - '**.md'
    types:
      - opened
      - reopened
      - synchronize

defaults:
  run:
    shell: bash

env:
  DOCKER_BUILDKIT: 1
  K8S_VERSION: 1.22.0
  K8S_TIMEOUT: 75s
  HELM_CHART_DIR: deployments/helm-chart
  HELM_CHART_VERSION: 0.0.0-edge
  GIT_NAME: NGINX Kubernetes Team
  GIT_MAIL: kubernetes@nginx.com

jobs:

  checks:
    name: Checks and variables
    runs-on: ubuntu-20.04
    outputs:
      sha_short: ${{ steps.vars.outputs.sha }}
      go_version: ${{ steps.vars.outputs.go_version }}
      go_path: ${{ steps.go.outputs.go_path }}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Output Variables
        id: vars
        run: |
          echo "::set-output name=sha::$(echo ${GITHUB_SHA} | cut -c1-7)"
          echo "::set-output name=go_version::$(grep "go 1." go.mod | cut -d " " -f 2)"
      - name: Setup Golang Environment
        uses: actions/setup-go@v2
        with:
          go-version: ${{ steps.vars.outputs.go_version }}
      - name: Determine GOPATH
        id: go
        run: echo "::set-output name=go_path::$(go env GOPATH)"
      - name: Check if CRDs changed
        run: |
          make update-crds && git diff --name-only --exit-code deployments/common/crds* deployments/helm-chart/crds*
      - name: Check if Codegen changed
        run: |
          make update-codegen && git diff --name-only --exit-code pkg/**/zz_generated.deepcopy.go

  binary:
    name: Build binary
    runs-on: ubuntu-20.04
    needs: checks
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Golang Environment
        uses: actions/setup-go@v2
        with:
          go-version: ${{ needs.checks.outputs.go_version }}
      - name: Build binary
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: build --snapshot --rm-dist --id kubernetes-ingress --single-target
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOPATH: ${{ needs.check.outputs.go_path }}
      - name: Store Artifacts in Cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}-single

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-20.04
    needs: checks
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Setup Golang Environment
        uses: actions/setup-go@v2
        with:
          go-version: ${{ needs.checks.outputs.go_version }}
      - name: Run Tests
        run: go test ./...

  build-image-scan:
    name: Build and scan Docker images
    runs-on: ubuntu-20.04
    needs: [binary, checks]
    strategy:
      matrix:
        image: [debian, alpine, opentracing, ubi]
        ubi_version: ["8"]
        include:
          - image: ubi
            ubi_version: 7
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Fetch Cached Artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}-single
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build ${{ matrix.image }} Container
        uses: docker/build-push-action@v2
        with:
          file: build/Dockerfile
          context: '.'
          # Disable cache until https://github.com/docker/buildx/issues/681 is fixed
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          target: goreleaser
          tags: docker.io/nginx/nginx-ingress:${{ matrix.image }}-${{ github.sha }}
          load: true
          build-args: |
            BUILD_OS=${{ matrix.image }}
            UBI_VERSION=${{ matrix.ubi_version }}
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/nginx/nginx-ingress:${{ matrix.image }}-${{ github.sha }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results-${{ matrix.image }}.sarif'
          ignore-unfixed: 'true'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results-${{ matrix.image }}.sarif'
      - name: Upload Scan Results
        uses: actions/upload-artifact@v2
        with:
          name: 'trivy-results-${{ matrix.image }}.sarif'
          path: 'trivy-results-${{ matrix.image }}.sarif'
        if: always()

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-20.04
    needs: [checks, binary, build-image-scan, unit-tests]
    strategy:
      matrix:
        include:
          - image: debian
            marker: 'ingresses'
          - image: alpine
            marker: 'vsr'
          - image: opentracing
            marker: 'vs'
          - image: ubi
            marker: 'ts'
          - image: debian
            marker: 'policies'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Run Smoke Tests
        id: smoke-tests
        uses: ./.github/actions/smoke-tests
        with:
          image: ${{ matrix.image }}
          marker: ${{ matrix.marker }}
      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.smoke-tests.outputs.test-results-name }}
          path: ${{ github.workspace }}/tests/${{ steps.smoke-tests.outputs.test-results-name }}.html
        if: always()

  helm-tests:
    name: Helm Tests
    runs-on: ubuntu-20.04
    needs: [binary, build-image-scan, unit-tests]
    env:
      NGINX_HTTP_PORT: 8080
      NGINX_HTTPS_PORT: 8443
      HELM_TEST_RETRIES: 5
      HELM_HTTP_POSTFIX: s
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Fetch Cached Artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}-single
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build Docker Image nginx-ingress
        uses: docker/build-push-action@v2
        with:
          file: build/Dockerfile
          context: '.'
          # Disable cache until https://github.com/docker/buildx/issues/681 is fixed
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          target: goreleaser
          tags: nginx-ingress:${{ github.sha }}
          load: true
          build-args: BUILD_OS=debian
      - name: Deploy Kubernetes
        id: k8s
        run: |
          kind create cluster --name ${{ github.run_id }} --image=kindest/node:v${{ env.K8S_VERSION }} --wait ${{ env.K8S_TIMEOUT }}
          kind load docker-image nginx-ingress:${{ github.sha }} --name ${{ github.run_id }}
      - name: Install Chart
        run: >
          helm install
          oss
          .
          --set controller.image.repository=nginx-ingress
          --set controller.image.tag=${{ github.sha }}
          --set controller.service.type=NodePort
          --set controller.nginxplus=false
          --wait
        working-directory: ${{ github.workspace }}/deployments/helm-chart
      - name: Expose Test Ingresses
        run: |
          kubectl port-forward service/oss-nginx-ingress ${{ env.NGINX_HTTP_PORT }}:80 &
          kubectl port-forward service/oss-nginx-ingress ${{ env.NGINX_HTTPS_PORT }}:443 &
      - name: Test HTTP
        run: |
          . tests/ci-files/helm-http-test.sh ${{ env.HELM_TEST_RETRIES }} ${{ env.NGINX_HTTP_PORT }}
      - name: Test HTTPS
        run: |
          . tests/ci-files/helm-http-test.sh ${{ env.HELM_TEST_RETRIES }} ${{ env.NGINX_HTTPS_PORT }} ${{ env.HELM_HTTP_POSTFIX }}

  binaries-release:
    name: Build Binaries for release
    runs-on: ubuntu-20.04
    needs: [checks, smoke-tests, helm-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Golang Environment
        uses: actions/setup-go@v2
        with:
          go-version: ${{ needs.checks.outputs.go_version }}
      - name: Build binaries
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: build --snapshot --rm-dist --id kubernetes-ingress
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOPATH: ${{ needs.check.outputs.go_path }}
      - name: Store Artifacts in Cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}-multi

  release-docker:
    name: Release Images
    runs-on: ubuntu-20.04
    needs: [checks, binaries-release]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    strategy:
      matrix:
        include:
          - tag: edge
            type: debian
            platforms: linux/arm,linux/arm64,linux/amd64,linux/ppc64le,linux/s390x
          - tag: edge-alpine
            type: alpine
            platforms: linux/arm,linux/arm64,linux/amd64,linux/ppc64le,linux/s390x
          - tag: edge-ubi
            type: ubi
            platforms: linux/arm64,linux/amd64
          - tag: edge-ot
            type: opentracing
            platforms: linux/amd64
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Output Variables
        id: commit
        run: |
          echo "::set-output name=tag::$(git describe --tags --abbrev=0)"
          echo "::set-output name=date::$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
      - name: Fetch Cached Artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}-multi
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm,arm64,ppc64le,s390x
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: DockerHub Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Dockerhub
        uses: docker/build-push-action@v2
        with:
          file: build/Dockerfile
          context: '.'
          # Disable cache until https://github.com/docker/buildx/issues/681 is fixed
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          target: goreleaser
          tags: nginx/nginx-ingress:${{ matrix.tag }}
          platforms: ${{ matrix.platforms }}
          push: true
          build-args: |
            BUILD_OS=${{ matrix.type }}
            IC_VERSION=${{ steps.commit.outputs.tag }}-SNAPSHOT-${{ needs.checks.outputs.sha_short }}
            DATE=${{ steps.commit.outputs.date }}
            GIT_COMMIT=${{ github.sha }}

  package-helm:
    name: Package Helm Chart
    runs-on: ubuntu-20.04
    needs: release-docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Lint
        run: |
          helm lint ${{ env.HELM_CHART_DIR }} || true
      - name: Package
        run: |
          helm package --version ${{ env.HELM_CHART_VERSION }} ${{ env.HELM_CHART_DIR }}
      - name: Upload Chart
        uses: actions/upload-artifact@v2
        with:
          name: helm-chart
          path: ${{ github.workspace }}/nginx-ingress-${{ env.HELM_CHART_VERSION }}.tgz

  release-helm:
    name: Release Helm Chart
    runs-on: ubuntu-20.04
    needs: package-helm
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          repository: nginxinc/helm-charts
          fetch-depth: 1
          token: ${{ secrets.NGINX_PAT }}
      - name: Remove previous Chart
        run: rm -f ${{ github.workspace }}/edge/nginx-ingress-${{ env.HELM_CHART_VERSION }}.tgz
      - name: Retrieve latest Helm Chart
        uses: actions/download-artifact@v2
        with:
          name: helm-chart
          path: ${{ github.workspace }}/edge
      - name: Push Helm Chart
        run: |
          helm repo index edge --url https://helm.nginx.com/edge
          git add -A
          git -c user.name='${{ env.GIT_NAME }}' -c user.email='${{ env.GIT_MAIL }}' \
          commit -m "NGINX Ingress Controller - Edge Release (latest)"
          git push -u origin master
