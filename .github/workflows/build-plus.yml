name: Build Plus

on:
  workflow_call:
    inputs:
      platforms:
        required: true
        type: string
      image:
        required: true
        type: string
      tag:
        required: false
        type: string
      go-md5:
        required: true
        type: string
      base-image-md5:
        required: false
        type: string
      branch:
        required: false
        type: string
      nap-modules:
        required: false
        type: string
      target:
        required: true
        type: string
      authenticated:
        required: true
        type: boolean
      full-build:
        description: Always build base image
        type: boolean
        default: false
      ic-version:
        required: false
        type: string

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  build:
    permissions:
      contents: read # for docker/build-push-action to read repo content
      id-token: write # for OIDC login to AWS
      pull-requests: write # for scout report
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
        with:
          token_format: access_token
          workload_identity_provider: ${{ secrets.GCR_WORKLOAD_IDENTITY }}
          service_account: ${{ secrets.GCR_SERVICE_ACCOUNT }}
        if: ${{ inputs.authenticated }}

      - name: Login to GCR
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: gcr.io
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
        if: ${{ inputs.authenticated }}

      - name: NAP modules
        id: nap_modules
        run: |
          [[ "${{ inputs.nap-modules }}" == "waf,dos" ]] && modules="waf-dos" || name="${{ inputs.nap-modules }}"
          echo "name=${name}" >> $GITHUB_OUTPUT
          [[ "${{ inputs.nap-modules }}" == "waf,dos" ]] && modules="both" || modules="${{ inputs.nap-modules }}"
          echo "modules=${modules}" >> $GITHUB_OUTPUT
        if: ${{ inputs.nap-modules != '' }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: |
            name=gcr.io/f5-gcs-7899-ptg-ingrss-ctlr/dev/nginx-ic${{ contains(inputs.nap-modules, 'dos') && '-dos' || '' }}${{ contains(inputs.nap-modules, 'waf') && '-nap' || '' }}${{ contains(inputs.image, 'v5') && '-v5' || '' }}/nginx-plus-ingress
          flavor: |
            suffix=${{ contains(inputs.image, 'ubi-9') && '-ubi' || '' }}${{ contains(inputs.image, 'ubi-8') && '-ubi8' || '' }}${{ contains(inputs.image, 'alpine') && '-alpine' || '' }}${{ contains(inputs.target, 'aws') && '-mktpl' || '' }}${{ contains(inputs.image, 'fips') && '-fips' || ''}}
          tags: |
            type=raw,value=${{ inputs.tag }}
          labels: |
            org.opencontainers.image.description=NGINX Plus Ingress Controller for Kubernetes
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: ${{ contains(inputs.target, 'aws') && 'manifest' || 'manifest,index' }}

      - name: Set base name variable
        id: base_name
        run: |
          base_image="gcr.io/f5-gcs-7899-ptg-ingrss-ctlr/dev/nginx-ic-base/plus:${{ inputs.base-image-md5 }}-${{ inputs.image }}${{ steps.nap_modules.outputs.name != '' && format('-{0}', steps.nap_modules.outputs.name) || '' }}${{ contains(inputs.image, 'v5') && '-v5' || '' }}"
          echo "image=${base_image}" >> $GITHUB_OUTPUT

      - name: Check if images exist
        id: images_exist
        run: |
          if docker pull ${{ steps.base_name.outputs.image }}; then
            echo "base_exists=true" >> $GITHUB_OUTPUT
          fi
          if docker manifest inspect ${{ steps.meta.outputs.tags }}; then
            echo "target_exists=true" >> $GITHUB_OUTPUT
          fi
        if: ${{ inputs.authenticated && ! inputs.full-build }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
        with:
          platforms: arm64
        if: ${{ steps.images_exist.outputs.base_exists != 'true' || steps.images_exist.outputs.target_exists != 'true' }}

      - name: Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
        if: ${{ steps.images_exist.outputs.base_exists != 'true' || steps.images_exist.outputs.target_exists != 'true' }}

      - name: Build Base Container
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          file: build/Dockerfile
          context: "."
          cache-to: type=gha,scope=${{ inputs.image }}${{ steps.nap_modules.outputs.name != '' && format('-{0}', steps.nap_modules.outputs.name) || '' }},mode=max
          target: common
          tags: ${{ steps.base_name.outputs.image }}
          platforms: ${{ inputs.platforms }}
          pull: true
          push: true
          no-cache: true
          build-args: |
            BUILD_OS=${{ inputs.image }}
            IC_VERSION=${{ inputs.ic-version && inputs.ic-version || steps.meta.outputs.version }}
            ${{ inputs.nap-modules != '' && format('NAP_MODULES={0}', steps.nap_modules.outputs.name) || '' }}
          secrets: |
            "nginx-repo.crt=${{ inputs.nap-modules != '' && secrets.NGINX_AP_CRT || secrets.NGINX_CRT }}"
            "nginx-repo.key=${{ inputs.nap-modules != '' && secrets.NGINX_AP_KEY || secrets.NGINX_KEY }}"
            ${{ inputs.nap-modules != '' && contains(inputs.image, 'ubi') && format('"rhel_license={0}"', secrets.RHEL_LICENSE) || '' }}
        if: ${{ inputs.authenticated && steps.images_exist.outputs.base_exists != 'true' }}

      - name: Debug values
        run: |
          echo "authenticated: ${{ inputs.authenticated }}"
          echo "images_exist: ${{ steps.images_exist.outputs.base_exists }}"
          echo "target_exists: ${{ steps.images_exist.outputs.target_exists }}"
          echo "full-build: ${{ inputs.full-build }}"

      - name: Fetch Cached Artifacts
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ inputs.go-md5 }}
          fail-on-cache-miss: true
        if: ${{ steps.images_exist.outputs.base_exists != 'true' || steps.images_exist.outputs.target_exists != 'true' }}

      - name: Build Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        id: build-push
        with:
          file: build/Dockerfile
          context: "."
          cache-from: type=gha,scope=${{ inputs.image }}${{ steps.nap_modules.outputs.name != '' && format('-{0}', steps.nap_modules.outputs.name) || '' }}
          cache-to: type=gha,scope=${{ inputs.image }}${{ steps.nap_modules.outputs.name != '' && format('-{0}', steps.nap_modules.outputs.name) || '' }},mode=max
          target: ${{ inputs.target }}${{ inputs.authenticated && '-prebuilt' || '' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          platforms: ${{ inputs.platforms }}
          load: false
          push: ${{ inputs.authenticated }}
          pull: true
          sbom: ${{ inputs.authenticated && !contains(inputs.target, 'aws') }}
          provenance: false
          build-args: |
            BUILD_OS=${{ inputs.image }}
            ${{ inputs.authenticated && format('PREBUILT_BASE_IMG={0}', steps.base_name.outputs.image ) }}
            IC_VERSION=${{ inputs.ic-version && inputs.ic-version || steps.meta.outputs.version }}
            ${{ inputs.nap-modules != '' && format('NAP_MODULES={0}', steps.nap_modules.outputs.name) || '' }}
            ${{ (contains(inputs.target, 'aws') && inputs.nap-modules != '') && format('NAP_MODULES_AWS={0}', steps.nap_modules.outputs.modules) || '' }}
          secrets: |
            "nginx-repo.crt=${{ inputs.nap-modules != '' && secrets.NGINX_AP_CRT || secrets.NGINX_CRT }}"
            "nginx-repo.key=${{ inputs.nap-modules != '' && secrets.NGINX_AP_KEY || secrets.NGINX_KEY }}"
            ${{ contains(inputs.image, 'ubi') && format('"rhel_license={0}"', secrets.RHEL_LICENSE) || '' }}
        if: ${{  steps.images_exist.outputs.base_exists != 'true' || steps.images_exist.outputs.target_exists != 'true' }}

      - name: Make directory for security scan results
        run: |
          mkdir -p "${{ inputs.image }}-results/"
        if: ${{ inputs.authenticated && steps.build-push.conclusion == 'success' }}

      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@6e7b7d1fd3e4fef0c5fa8cce1229c54b2c9bd0d8 # 0.24.0
      #   with:
      #     image-ref: ${{ steps.meta.outputs.tags }}
      #     format: "sarif"
      #     output: "${{ inputs.image }}-results/trivy.sarif"
      #     ignore-unfixed: "true"
      #   if: ${{ inputs.authenticated && steps.build-push.conclusion == 'success' }}

      - name: DockerHub Login for Docker Scout
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: ${{ inputs.authenticated && steps.build-push.conclusion == 'success' }}

      - name: Run Docker Scout vulnerability scanner
        id: docker-scout
        uses: docker/scout-action@aceeb83b88f2ae54376891227858dda7af647183 # v1.18.1
        with:
          command: cves
          image: ${{ steps.meta.outputs.tags }}
          ignore-base: true
          sarif-file: "${{ inputs.image }}-results/scout.sarif"
          write-comment: false
          github-token: ${{ secrets.GITHUB_TOKEN }} # to be able to write the comment
          summary: true
        if: ${{ inputs.authenticated && steps.build-push.conclusion == 'success' }}
